version: '3.8'

services:
  # Caddy reverse proxy
  caddy:
    image: caddy:2.7-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - cloud-splitter-network
    depends_on:
      - frontend
      - backend

  # Frontend Next.js application
  frontend:
    build:
      context: ./web/frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://cloud-splitter.localhost/api
      - NEXT_PUBLIC_WS_URL=wss://cloud-splitter.localhost/ws
    volumes:
      - ./web/frontend:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - cloud-splitter-network
    depends_on:
      - backend

  # Backend FastAPI application
  backend:
    build:
      context: ./web/backend
      dockerfile: Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - POSTGRES_DB=${POSTGRES_DB:-cloud_splitter}
      - POSTGRES_HOST=db
      - UPLOAD_DIR=/app/uploads
    volumes:
      - ./web/backend:/app
      - upload_data:/app/uploads
    networks:
      - cloud-splitter-network
    depends_on:
      - db

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - POSTGRES_DB=${POSTGRES_DB:-cloud_splitter}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cloud-splitter-network

volumes:
  caddy_data:
  caddy_config:
  frontend_node_modules:
  postgres_data:
  upload_data:

networks:
  cloud-splitter-network:
    driver: bridge

